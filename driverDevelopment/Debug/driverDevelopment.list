
driverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa4  08000aa4  00010aac  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa4  08000aa4  00010aac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa4  08000aac  00010aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa4  08000aa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010aac  2**0
                  CONTENTS
 10 .bss          00000058  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010aac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000167b  00000000  00000000  00010ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000572  00000000  00000000  00012151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000126c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00012838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d9  00000000  00000000  00012960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d92  00000000  00000000  00014f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d09  00000000  00000000  00016ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000209d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004d8  00000000  00000000  00020a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a7c 	.word	0x08000a7c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a7c 	.word	0x08000a7c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <EXTI0_IRQHandler>:

SPI_HandleTypeDef_t SPI_Handle;
USART_HandleTypedef_t USART_Handle;

void EXTI0_IRQHandler()
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
	char msgToSend[] = "Hello World\n";
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <EXTI0_IRQHandler+0x48>)
 8000200:	463c      	mov	r4, r7
 8000202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000204:	c407      	stmia	r4!, {r0, r1, r2}
 8000206:	7023      	strb	r3, [r4, #0]
	if(EXTI->PR & 0x1)
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d010      	beq.n	8000236 <EXTI0_IRQHandler+0x3e>
	{
		EXTI->PR |= (0x1U << 0U);
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6153      	str	r3, [r2, #20]

		SPI_TransmitData_IT(&SPI_Handle, (uint8_t*)msgToSend, strlen(msgToSend));
 8000220:	463b      	mov	r3, r7
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffe0 	bl	80001e8 <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	463b      	mov	r3, r7
 800022e:	4619      	mov	r1, r3
 8000230:	4805      	ldr	r0, [pc, #20]	; (8000248 <EXTI0_IRQHandler+0x50>)
 8000232:	f000 fb83 	bl	800093c <SPI_TransmitData_IT>
	}
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	bd90      	pop	{r4, r7, pc}
 800023e:	bf00      	nop
 8000240:	08000a94 	.word	0x08000a94
 8000244:	40013c00 	.word	0x40013c00
 8000248:	2000001c 	.word	0x2000001c

0800024c <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	SPI_InterruptHandler(&SPI_Handle);
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <SPI1_IRQHandler+0x10>)
 8000252:	f000 fbab 	bl	80009ac <SPI_InterruptHandler>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000001c 	.word	0x2000001c

08000260 <main>:

int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 8000264:	f000 f808 	bl	8000278 <GPIO_LedConfig>
	GPIO_ButtonInterruptConfig();
 8000268:	f000 f856 	bl	8000318 <GPIO_ButtonInterruptConfig>
	SPI_GPIO_Config();
 800026c:	f000 f8cc 	bl	8000408 <SPI_GPIO_Config>
	SPI_Config();
 8000270:	f000 f88a 	bl	8000388 <SPI_Config>

	for(;;)
 8000274:	e7fe      	b.n	8000274 <main+0x14>
	...

08000278 <GPIO_LedConfig>:

	}
}

static void GPIO_LedConfig()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_LedStruct = { 0 };
 800027e:	463b      	mov	r3, r7
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
 800028c:	615a      	str	r2, [r3, #20]

	RCC_GPIOD_CLK_ENABLE();		// Clock Enable for LED's
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <GPIO_LedConfig+0x94>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a1d      	ldr	r2, [pc, #116]	; (800030c <GPIO_LedConfig+0x94>)
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
 800029e:	4b1b      	ldr	r3, [pc, #108]	; (800030c <GPIO_LedConfig+0x94>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a2:	f003 0308 	and.w	r3, r3, #8
 80002a6:	61fb      	str	r3, [r7, #28]
	RCC_GPIOA_CLK_ENABLE();		// Clock Enable for Button
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <GPIO_LedConfig+0x94>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <GPIO_LedConfig+0x94>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <GPIO_LedConfig+0x94>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]

	// LED Configuration
	GPIO_LedStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002c6:	603b      	str	r3, [r7, #0]
	GPIO_LedStruct.Mode = GPIO_MODE_OUTPUT;
 80002c8:	2301      	movs	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
	GPIO_LedStruct.Speed = GPIO_SPEED_LOW;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
	GPIO_LedStruct.Otype = GPIO_OTYPE_PP;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
	GPIO_LedStruct.PuPd = GPIO_PUPD_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOD, &GPIO_LedStruct);
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <GPIO_LedConfig+0x98>)
 80002de:	f000 f9d6 	bl	800068e <GPIO_Init>

	memset(&GPIO_LedStruct, 0, sizeof(GPIO_LedStruct));
 80002e2:	463b      	mov	r3, r7
 80002e4:	2218      	movs	r2, #24
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fbbf 	bl	8000a6c <memset>

	// Button Configuration
	GPIO_LedStruct.pinNumber = GPIO_PIN_0;
 80002ee:	2301      	movs	r3, #1
 80002f0:	603b      	str	r3, [r7, #0]
	GPIO_LedStruct.Mode = GPIO_MODE_INPUT;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
	GPIO_LedStruct.PuPd = GPIO_PUPD_PULLDOWN;
 80002f6:	2302      	movs	r3, #2
 80002f8:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIO_LedStruct);
 80002fa:	463b      	mov	r3, r7
 80002fc:	4619      	mov	r1, r3
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <GPIO_LedConfig+0x9c>)
 8000300:	f000 f9c5 	bl	800068e <GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3720      	adds	r7, #32
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40023800 	.word	0x40023800
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40020000 	.word	0x40020000

08000318 <GPIO_ButtonInterruptConfig>:

static void GPIO_ButtonInterruptConfig()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef_t EXTI_Struct = { 0 };
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]

	RCC_SYSCFG_CLK_ENABLE();
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 8000328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 800032c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000330:	6453      	str	r3, [r2, #68]	; 0x44
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 8000334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800033a:	60fb      	str	r3, [r7, #12]
	RCC_GPIOA_CLK_ENABLE();
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <GPIO_ButtonInterruptConfig+0x6c>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	60bb      	str	r3, [r7, #8]

	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 8000356:	2100      	movs	r1, #0
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f931 	bl	80005c0 <EXTI_LineConfig>

	EXTI_Struct.EXTI_LineCmd = ENABLE;
 800035e:	2301      	movs	r3, #1
 8000360:	71fb      	strb	r3, [r7, #7]
	EXTI_Struct.EXTI_LineNumber = EXTI_LineSource_0;
 8000362:	2300      	movs	r3, #0
 8000364:	713b      	strb	r3, [r7, #4]
	EXTI_Struct.EXTI_Mode = EXTI_MODE_Interrupt;
 8000366:	2300      	movs	r3, #0
 8000368:	71bb      	strb	r3, [r7, #6]
	EXTI_Struct.TriggerSelection = EXTI_Trigger_Rising;
 800036a:	2308      	movs	r3, #8
 800036c:	717b      	strb	r3, [r7, #5]
	EXTI_Init(&EXTI_Struct);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f895 	bl	80004a0 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 8000376:	2006      	movs	r0, #6
 8000378:	f000 f956 	bl	8000628 <NVIC_EnableInterrupt>
}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800

08000388 <SPI_Config>:

static void SPI_Config()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	RCC_SPI1_CLK_ENABLE();
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <SPI_Config+0x74>)
 8000394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <SPI_Config+0x74>)
 8000398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039c:	6453      	str	r3, [r2, #68]	; 0x44
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <SPI_Config+0x74>)
 80003a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003a6:	607b      	str	r3, [r7, #4]

	SPI_Handle.Instance = SPI1;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SPI_Config+0x78>)
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <SPI_Config+0x7c>)
 80003ac:	601a      	str	r2, [r3, #0]
	SPI_Handle.Init.BaudRate = SPI_BAUDRATE_DIV8;	// 2 MHz
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <SPI_Config+0x78>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
	SPI_Handle.Init.BusConfig = SPI_BUS_FullDuplex;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <SPI_Config+0x78>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
	SPI_Handle.Init.CPHA = SPI_CPHA_FIRST;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SPI_Config+0x78>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
	SPI_Handle.Init.CPOL = SPI_CPOL_LOW;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SPI_Config+0x78>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
	SPI_Handle.Init.DFF_Format = SPI_DFF_8BITS;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <SPI_Config+0x78>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
	SPI_Handle.Init.FrameFormat = SPI_FRAMEFORMAT_MSB;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <SPI_Config+0x78>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SPI_Config+0x78>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	605a      	str	r2, [r3, #4]
	SPI_Handle.Init.SSM_Cmd = SPI_SSM_ENABLE;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <SPI_Config+0x78>)
 80003da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003de:	615a      	str	r2, [r3, #20]
	SPI_Init(&SPI_Handle);
 80003e0:	4807      	ldr	r0, [pc, #28]	; (8000400 <SPI_Config+0x78>)
 80003e2:	f000 fa5f 	bl	80008a4 <SPI_Init>

	NVIC_EnableInterrupt(SPI1_IRQNumber);
 80003e6:	2023      	movs	r0, #35	; 0x23
 80003e8:	f000 f91e 	bl	8000628 <NVIC_EnableInterrupt>
	SPI_PeriphCmd(&SPI_Handle, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	4804      	ldr	r0, [pc, #16]	; (8000400 <SPI_Config+0x78>)
 80003f0:	f000 fa85 	bl	80008fe <SPI_PeriphCmd>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40023800 	.word	0x40023800
 8000400:	2000001c 	.word	0x2000001c
 8000404:	40013000 	.word	0x40013000

08000408 <SPI_GPIO_Config>:

static void SPI_GPIO_Config()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 800040e:	463b      	mov	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
 800041c:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.pinNumber = GPIO_PIN_5 | GPIO_PIN_7;		// PA5 = SCK, PA7 = MOSI
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 8000422:	2302      	movs	r3, #2
 8000424:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_VERY;
 800042e:	2303      	movs	r3, #3
 8000430:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5;
 8000432:	2305      	movs	r3, #5
 8000434:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <SPI_GPIO_Config+0x40>)
 800043c:	f000 f927 	bl	800068e <GPIO_Init>
}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40020000 	.word	0x40020000

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	; (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	; (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 fad3 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff feef 	bl	8000260 <main>

08000482 <LoopForever>:

LoopForever:
    b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000490:	08000aac 	.word	0x08000aac
  ldr r2, =_sbss
 8000494:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000498:	20000058 	.word	0x20000058

0800049c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC_IRQHandler>
	...

080004a0 <EXTI_Init>:
 * @param	EXTI_InitStruct = User config structure
 *
 * @retval	void
 */
void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
	tempValue = (uint32_t)EXTI_BASE_ADDR;
 80004ac:	4b43      	ldr	r3, [pc, #268]	; (80005bc <EXTI_Init+0x11c>)
 80004ae:	60fb      	str	r3, [r7, #12]
	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004b0:	4b42      	ldr	r3, [pc, #264]	; (80005bc <EXTI_Init+0x11c>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2301      	movs	r3, #1
 80004bc:	408b      	lsls	r3, r1
 80004be:	43db      	mvns	r3, r3
 80004c0:	493e      	ldr	r1, [pc, #248]	; (80005bc <EXTI_Init+0x11c>)
 80004c2:	4013      	ands	r3, r2
 80004c4:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <EXTI_Init+0x11c>)
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	408b      	lsls	r3, r1
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4939      	ldr	r1, [pc, #228]	; (80005bc <EXTI_Init+0x11c>)
 80004d8:	4013      	ands	r3, r2
 80004da:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	78db      	ldrb	r3, [r3, #3]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d053      	beq.n	800058c <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	4413      	add	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t *)tempValue ) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6819      	ldr	r1, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2301      	movs	r3, #1
 80004fc:	fa03 f202 	lsl.w	r2, r3, r2
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <EXTI_Init+0x11c>)
 8000508:	60fb      	str	r3, [r7, #12]
		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800050a:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <EXTI_Init+0x11c>)
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	2301      	movs	r3, #1
 8000516:	408b      	lsls	r3, r1
 8000518:	43db      	mvns	r3, r3
 800051a:	4928      	ldr	r1, [pc, #160]	; (80005bc <EXTI_Init+0x11c>)
 800051c:	4013      	ands	r3, r2
 800051e:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <EXTI_Init+0x11c>)
 8000522:	68da      	ldr	r2, [r3, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	2301      	movs	r3, #1
 800052c:	408b      	lsls	r3, r1
 800052e:	43db      	mvns	r3, r3
 8000530:	4922      	ldr	r1, [pc, #136]	; (80005bc <EXTI_Init+0x11c>)
 8000532:	4013      	ands	r3, r2
 8000534:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	2b10      	cmp	r3, #16
 800053c:	d114      	bne.n	8000568 <EXTI_Init+0xc8>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <EXTI_Init+0x11c>)
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4619      	mov	r1, r3
 8000548:	2301      	movs	r3, #1
 800054a:	408b      	lsls	r3, r1
 800054c:	491b      	ldr	r1, [pc, #108]	; (80005bc <EXTI_Init+0x11c>)
 800054e:	4313      	orrs	r3, r2
 8000550:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <EXTI_Init+0x11c>)
 8000554:	68da      	ldr	r2, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	2301      	movs	r3, #1
 800055e:	408b      	lsls	r3, r1
 8000560:	4916      	ldr	r1, [pc, #88]	; (80005bc <EXTI_Init+0x11c>)
 8000562:	4313      	orrs	r3, r2
 8000564:	60cb      	str	r3, [r1, #12]
	{
		tempValue = (uint32_t)EXTI_BASE_ADDR;
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((__IO uint32_t *)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 8000566:	e024      	b.n	80005b2 <EXTI_Init+0x112>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	461a      	mov	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
			*((__IO uint32_t *)tempValue ) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	2301      	movs	r3, #1
 8000580:	fa03 f202 	lsl.w	r2, r3, r2
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	e012      	b.n	80005b2 <EXTI_Init+0x112>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <EXTI_Init+0x11c>)
 800058e:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t *)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6819      	ldr	r1, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2301      	movs	r3, #1
 80005a8:	4093      	lsls	r3, r2
 80005aa:	43da      	mvns	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	400a      	ands	r2, r1
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40013c00 	.word	0x40013c00

080005c0 <EXTI_LineConfig>:
 * @param	EXTI_LineSource = Pin numbers & Line numbers @def_gorup EXTI_Line_Values
 *
 * @retval	void
 */
void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]

	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2U];
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <EXTI_LineConfig+0x64>)
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	3302      	adds	r3, #2
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	f003 0303 	and.w	r3, r3, #3
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	220f      	movs	r2, #15
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U) * 4);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTI_CR[EXTI_LineSource >> 2U] = tempValue;
 800060a:	4906      	ldr	r1, [pc, #24]	; (8000624 <EXTI_LineConfig+0x64>)
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	089b      	lsrs	r3, r3, #2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	3302      	adds	r3, #2
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40013800 	.word	0x40013800

08000628 <NVIC_EnableInterrupt>:
 * @param	IRQNumber = IRQ number of line
 *
 * @retval	void
 */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
	tempValue = *((IRQNumber >> 5U) + NVIC_ISER0);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	095b      	lsrs	r3, r3, #5
 800063a:	b2db      	uxtb	r3, r3
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000642:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 031f 	and.w	r3, r3, #31
 8000650:	2201      	movs	r2, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
	tempValue |=  (0x1U << (IRQNumber & 0x1FU));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 031f 	and.w	r3, r3, #31
 8000664:	2201      	movs	r2, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	4313      	orrs	r3, r2
 800066e:	60fb      	str	r3, [r7, #12]
	*((IRQNumber >> 5U) + NVIC_ISER0) = tempValue;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	b2db      	uxtb	r3, r3
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800067c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <GPIO_Init>:
 * @param	GPIO_ConfigStruct 	= User Config Structures
 *
 * @retval	void
 */
void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 800068e:	b480      	push	{r7}
 8000690:	b087      	sub	sp, #28
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]

	for(position = 0; position < 16; position++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e09f      	b.n	80007e6 <GPIO_Init+0x158>
	{
		fakePosition = (0x1U << position);
 80006a6:	2201      	movs	r2, #1
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->pinNumber) & fakePosition;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]

		if(fakePosition == lastPosition)
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	f040 808e 	bne.w	80007e0 <GPIO_Init+0x152>
		{
			/* MODE CONFIG */
			uint32_t tempValue = GPIOx->MODER;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	2203      	movs	r2, #3
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	43db      	mvns	r3, r3
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->Mode << (position * 2));
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d003      	beq.n	8000704 <GPIO_Init+0x76>
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d12d      	bne.n	8000760 <GPIO_Init+0xd2>
			{
				/* Output Type CONFIG */
				tempValue = GPIOx->OTYPER;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 800070a:	2201      	movs	r2, #1
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	4013      	ands	r3, r2
 8000718:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Otype << position);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	4313      	orrs	r3, r2
 8000728:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	605a      	str	r2, [r3, #4]

				/* Output Speed CONFIG */
				tempValue = GPIOx->OSPEEDR;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position * 2));
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2203      	movs	r2, #3
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Speed << (position * 2));
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	4313      	orrs	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	609a      	str	r2, [r3, #8]
			}
			/* Push Pull CONFIG */
			tempValue = GPIOx->PUPDR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2203      	movs	r2, #3
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->PuPd << (position * 2));
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	68da      	ldr	r2, [r3, #12]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4313      	orrs	r3, r2
 8000788:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	60da      	str	r2, [r3, #12]

			/* Alternate Mode CONFIG */
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d123      	bne.n	80007e0 <GPIO_Init+0x152>
			{
				tempValue = GPIOx->AFR[position >> 3U];
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	08da      	lsrs	r2, r3, #3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3208      	adds	r2, #8
 80007a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a4:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ((position & 0x7U) * 4));
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	f003 0307 	and.w	r3, r3, #7
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	220f      	movs	r2, #15
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ((position & 0x7U) * 4));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	08da      	lsrs	r2, r3, #3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3208      	adds	r2, #8
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position < 16; position++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	f67f af5c 	bls.w	80006a6 <GPIO_Init+0x18>
			}
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <SPI_CloseISR_TX>:
 * @param	SPI_Handle = User config structure
 *
 * @retval	void
 */
static void SPI_CloseISR_TX(SPI_HandleTypeDef_t *SPI_Handle)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->CR2 &= ~(0x1U << SPI_CR2_TXEIE);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000810:	605a      	str	r2, [r3, #4]
	SPI_Handle->TxDataSize = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	851a      	strh	r2, [r3, #40]	; 0x28
	SPI_Handle->pTxDataAddr = NULL;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->busStateTx = SPI_BUS_FREE;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SPI_TransmitHelper_16Bits>:
 * @param	SPI_Handle = User config structure
 *
 * @retval	void
 */
static void SPI_TransmitHelper_16Bits(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->DR = *((uint16_t*)(SPI_Handle->pTxDataAddr));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint16_t);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000848:	1c9a      	adds	r2, r3, #2
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->TxDataSize -= 2;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000852:	3b02      	subs	r3, #2
 8000854:	b29a      	uxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SPI_TransmitHelper_8Bits>:
 * @param	SPI_Handle = User config structure
 *
 * @retval	void
 */
static void SPI_TransmitHelper_8Bits(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->DR = *((uint8_t*)(SPI_Handle->pTxDataAddr));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint8_t);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->TxDataSize--;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000886:	3b01      	subs	r3, #1
 8000888:	b29a      	uxth	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	851a      	strh	r2, [r3, #40]	; 0x28

	if(SPI_Handle->TxDataSize == 0)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <SPI_TransmitHelper_8Bits+0x38>
	{
		SPI_CloseISR_TX(SPI_Handle);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffaf 	bl	80007fa <SPI_CloseISR_TX>
	}
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SPI_Init>:
 * @param	SPI_Handle = User config structure
 *
 * @retval	void
 */
void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]

	tempValue = SPI_Handle->Instance->CR1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	60fb      	str	r3, [r7, #12]

	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) 			| (SPI_Handle->Init.CPOL) 		| (SPI_Handle->Init.DFF_Format) |	\
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691a      	ldr	r2, [r3, #16]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	431a      	orrs	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) 	 | (SPI_Handle->Init.FrameFormat) 	| (SPI_Handle->Init.BusConfig)  | (SPI_Handle->Init.SSM_Cmd);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) 			| (SPI_Handle->Init.CPOL) 		| (SPI_Handle->Init.DFF_Format) |	\
 80008d2:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) 	 | (SPI_Handle->Init.FrameFormat) 	| (SPI_Handle->Init.BusConfig)  | (SPI_Handle->Init.SSM_Cmd);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) 			| (SPI_Handle->Init.CPOL) 		| (SPI_Handle->Init.DFF_Format) |	\
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

	SPI_Handle->Instance->CR1 = tempValue;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <SPI_PeriphCmd>:
 * @param	stateofSPı = ENABLE of DISABLE
 *
 * @retval	void
 */
void SPI_PeriphCmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t stateofSPı)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	70fb      	strb	r3, [r7, #3]
	if(stateofSPı == ENABLE)
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d108      	bne.n	8000922 <SPI_PeriphCmd+0x24>
	{
		SPI_Handle->Instance->CR1 |= (0x1U << SPI_CR1_SPE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800091e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
	}
}
 8000920:	e007      	b.n	8000932 <SPI_PeriphCmd+0x34>
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <SPI_TransmitData_IT>:
 * @param	sizeOfData 	= Bytes numbers that we will send
 *
 * @retval	void
 */
void SPI_TransmitData_IT(SPI_HandleTypeDef_t *SPI_Handle, uint8_t *pData, uint16_t sizeOfData)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
	SPI_BusStatus_t busState = SPI_Handle->busStateTx;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000950:	75fb      	strb	r3, [r7, #23]

	if(busState != SPI_BUS_BUSY_TX)
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d01f      	beq.n	8000998 <SPI_TransmitData_IT+0x5c>
	{
		SPI_Handle->pTxDataAddr = (uint8_t*)pData;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
		SPI_Handle->TxDataSize = (uint16_t)sizeOfData;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	88fa      	ldrh	r2, [r7, #6]
 8000962:	851a      	strh	r2, [r3, #40]	; 0x28
		SPI_Handle->busStateTx = SPI_BUS_BUSY_TX;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

		if(SPI_Handle->Instance->CR1 & (0x1U << SPI_CR1_DFF))
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <SPI_TransmitData_IT+0x46>
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_16Bits;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <SPI_TransmitData_IT+0x68>)
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000980:	e002      	b.n	8000988 <SPI_TransmitData_IT+0x4c>
		}
		else
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_8Bits;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <SPI_TransmitData_IT+0x6c>)
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		SPI_Handle->Instance->CR2 |= (0x1U << SPI_CR2_TXEIE);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000996:	605a      	str	r2, [r3, #4]
	}
}
 8000998:	bf00      	nop
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	08000831 	.word	0x08000831
 80009a8:	08000865 	.word	0x08000865

080009ac <SPI_InterruptHandler>:
	}
}


void SPI_InterruptHandler(SPI_HandleTypeDef_t *SPI_Handle)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]

	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_TXEIE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009c8:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_TxE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0 ) && (interruptFlag != 0))
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <SPI_InterruptHandler+0x40>
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <SPI_InterruptHandler+0x40>
	{
		SPI_Handle->TxISRFunction(SPI_Handle);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	4798      	blx	r3
	}

	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_RXNEIE);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f8:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_RxNE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0 ) && (interruptFlag != 0))
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <SPI_InterruptHandler+0x70>
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <SPI_InterruptHandler+0x70>
	{
		SPI_Handle->RxISRFunction(SPI_Handle);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	4798      	blx	r3
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d0d      	ldr	r5, [pc, #52]	; (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1b64      	subs	r4, r4, r5
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2600      	movs	r6, #0
 8000a30:	42a6      	cmp	r6, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4d0b      	ldr	r5, [pc, #44]	; (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	; (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 f820 	bl	8000a7c <_init>
 8000a3c:	1b64      	subs	r4, r4, r5
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2600      	movs	r6, #0
 8000a42:	42a6      	cmp	r6, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4c:	4798      	blx	r3
 8000a4e:	3601      	adds	r6, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a56:	4798      	blx	r3
 8000a58:	3601      	adds	r6, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000aa4 	.word	0x08000aa4
 8000a60:	08000aa4 	.word	0x08000aa4
 8000a64:	08000aa4 	.word	0x08000aa4
 8000a68:	08000aa8 	.word	0x08000aa8

08000a6c <memset>:
 8000a6c:	4402      	add	r2, r0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d100      	bne.n	8000a76 <memset+0xa>
 8000a74:	4770      	bx	lr
 8000a76:	f803 1b01 	strb.w	r1, [r3], #1
 8000a7a:	e7f9      	b.n	8000a70 <memset+0x4>

08000a7c <_init>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr

08000a88 <_fini>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	bf00      	nop
 8000a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8e:	bc08      	pop	{r3}
 8000a90:	469e      	mov	lr, r3
 8000a92:	4770      	bx	lr
